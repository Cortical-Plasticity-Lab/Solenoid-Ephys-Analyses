function fig = CompareTimeToLFPMinima(C,varargin)
%COMPARETIMETOLFPMINIMA Compare distribution of onset times between RFA and S1 on per-channel distribution for solenoid trials
%
%  fig = Figures.CompareTimeToLFPMinima(C);
%  fig = Figures.CompareTimeToLFPMinima(C,'Name',value,...);
%
% Inputs
%  C        - Table output by tbl.stats.estimateChannelResponse
%  varargin - (Optional) 'Name',value parameter pairs. Most are cell arrays
%                        that default as empty but can be used to supply
%                        additional parameter pair arguments to the
%                        corresponding Matlab built-in object (see "PARS"
%                        section in code for details).
%
% Output
%  fig      - Figure handle
%
% See also: Figures, example_response_estimation

% Make sure input is correct table
if ~strcmp(C.Properties.UserData.type,'ChannelResponseTable')
   error('Bad table type <strong>(%s)</strong>: should be ChannelResponseTable.\n',...
      C.Properties.UserData.type);
end
   
% PARS % % % %
pars = struct;
pars.Axes_Args = {};          % Extra Axes parameter pairs
pars.Axes_Coordinate_Labels = struct('XCoordinate','','YCoordinate','p=','CoordinateSpec','%s%4.1f ms: %s%5.3f');
pars.Bar_Args_RFA = {};       % Extra parameter pairs for RFA histogram graphic
pars.Bar_Args_S1 = {};        % Extra parameter pairs for S1 histogram graphic
pars.Bins = 0:10:250;         % Default histogram bin edges (ms)
pars.Figure_Args = {};        % Extra figure parameter pairs
pars.FindPeaks_Args = {};     % Extra parameter pairs for `findpeaks` algorithm
pars.Histogram_Args = {};     % Extra parameters for histogram estimation
pars.KDE_Args = {};           % Example: fig = Figures.CompareTimeToLFPMinima(C,'KDE_Args',{'Bandwidth',0.5}); % Changes the bandwidth on KDE estimator
pars.KDE_Line_Args_RFA = {};  % Extra parameter pairs for RFA KDE graphic line
pars.KDE_Line_Args_S1 = {};   % Extra parameter pairs for S1 KDE graphic line
pars.Label_Args = {};         % Default axes label parameter pairs
pars.LegendLocation = 'northeast'; % Default legend location
pars.XLabel = '\bf\itt\rm \bf(time, ms)';    % Default string for XLabel (LaTeX formatting)
pars.YLabel = '\bfpdf(\itt\rm\bf)';          % Default string for YLabel (LaTeX formatting)
pars.XLim = [0 250];          % Default axes X-Limits
fn = fieldnames(pars);
for iV = 1:2:numel(varargin)
   idx = strcmpi(fn,varargin{iV});
   if sum(idx)==1
      pars.(fn{idx}) = varargin{iV+1};
   end
end
% END PARS % %

% Remove outlier rows
idx = (C.LFP_tMin < pars.Bins(1)) | (C.LFP_tMin > pars.Bins(end));
C(idx,:) = [];

fig = utils.formatDefaultFigure(figure,...
   'Name','Distributions of LFP Time-to-Minima (ms)',...
   'UserData',struct('Excluded',sum(idx)),...
   pars.Figure_Args{:}); 

% Make S1 axes
ax = utils.formatDefaultAxes(subplot(1,2,1),...
   'Parent',fig,'XLim',pars.XLim,...
   'UserData',pars.Axes_Coordinate_Labels,...
   pars.Axes_Args{:}); % Helper to apply MM-preferred axes properties
histogram(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="S1"),pars.Bins,...
   'FaceColor',cfg.gfx('Color_S1'),...
   'EdgeColor','none',...
   'Normalization','pdf',...
   pars.Histogram_Args{:});
set(findobj(ax.Children','Type','histogram'),...
   'DisplayName','Observed',...
   pars.Bar_Args_S1{:});
ksdensity(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="S1"),...
   'Function','pdf',...
   'Kernel','Epanechnikov',...
   pars.KDE_Args{:}); % Epanechnikov: kernel is optimal with respect to minimizing mean-square error
l = findobj(ax.Children,'Type','line');
set(l,...
   'LineWidth',2.5,...
   'Color','k',...
   'LineStyle',':',...
   'DisplayName','Smoothed',...
   pars.KDE_Line_Args_S1{:});
[pks,locs] = findpeaks(l.YData,l.XData,...
   'MinPeakProminence',0.004,...
   pars.FindPeaks_Args{:});
if numel(pks) > 1
   utils.addConnectingLine(ax,locs(1:2),pks(1:2),[],...
      'LabelHorizontalAlignment','left',...
      'LabelVerticalAlignment','middle',...
      'Marker_Args',{'CoordinateMarkerArgs',2,'CoordinateSpec','\\Delta%4.1f ms'});
end
utils.addPeakLabels(ax,locs,pks);
utils.formatDefaultLabel(...
   [title(ax,'S1');...
    xlabel(ax,pars.XLabel);...
    ylabel(ax,pars.YLabel)],...
    'Color',cfg.gfx('Color_S1'),...
    pars.Label_Args{:});
utils.addLegendToAxes(ax,[],...
   'Location',pars.LegendLocation); % Add formatted axes

% Make RFA axes
ax = utils.formatDefaultAxes(subplot(1,2,2),...
   'Parent',fig,...
   'UserData',pars.Axes_Coordinate_Labels,...
   'XLim',pars.XLim,...
   'YLim',ax.YLim,...  % Give it the same y-limits as the S1 axes
   pars.Axes_Args{:}); % Helper to apply MM-preferred axes properties 
histogram(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="RFA"),pars.Bins,...
   'FaceColor',cfg.gfx('Color_RFA'),...
   'EdgeColor','none',...
   'Normalization','pdf',...
   pars.Histogram_Args{:});
set(findobj(ax.Children','Type','histogram'),...
   'DisplayName','Observed',...
   pars.Bar_Args_RFA{:});
ksdensity(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="RFA"),...
   'Function','pdf',...
   'Kernel','Epanechnikov',...
   pars.KDE_Args{:});  % Epanechnikov: kernel is optimal with respect to minimizing mean-square error
l = findobj(ax.Children,'Type','line');
set(l,...
   'LineWidth',2.5,...
   'Color','k',...
   'LineStyle',':',...
   'DisplayName','Smoothed',...
   pars.KDE_Line_Args_RFA{:});
[pks,locs] = findpeaks(l.YData,l.XData,...
   'MinPeakProminence',0.004,...
   pars.FindPeaks_Args{:});
if numel(pks) > 1 % Add connecting line to maxima on RFA plot
   utils.addConnectingLine(ax,locs(1:2),pks(1:2),[],...
      'LabelHorizontalAlignment','center',...
      'LabelVerticalAlignment','top',...
      'Marker_Args',{'CoordinateMarkerArgs',2,'CoordinateSpec','\\Delta%4.1f ms'});
end
utils.addPeakLabels(ax,locs,pks);
utils.addLegendToAxes(ax,[],...
   'Location',pars.LegendLocation); % Add formatted axes
utils.formatDefaultLabel(...
   [title(ax,'RFA');...
   xlabel(ax,pars.XLabel);...
   ylabel(ax,pars.YLabel)],...
   'Color',cfg.gfx('Color_RFA'),...
   pars.Label_Args{:});