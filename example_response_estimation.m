%EXAMPLE_RESPONSE_ESTIMATION Example script to show response estimate workflow using main database table
clearvars -except T C
clc;

%% Estimate cross-trial channel averages, by trial type and recording
% Define a function handle to aggregate LFP data at the Channel level
fcn = @(X){nanmean(X,1)}; % Returns trial-average time-series (as a cell)
inputVars = {'LFP'}; % Will use the 'LFP' variable in T
outputVar = 'LFP_mean'; % Output variable name

% Rows of this table represent unique Channel/Block/Trial Type combinations
C = tbl.stats.estimateChannelResponse(T,fcn,inputVars,outputVar); % ~15 sec

% It might not be a bad idea to do this using medians, in order to exclude
% outliers in the LFP that might correspond to large artifacts in a subset
% of trials
C = tbl.stats.estimateChannelResponse(T,@(X){nanmedian(X,1)},'LFP','LFP_median');

%% Estimate time-to-minimum
% Note 1:
% This function can be repeated on the Channel-aggregated table (as shown 
% next), as that table contains all the information that is needed to group 
% by Channels! So let's say we want to do processing on trial averages, 
% we can then re-use this function with a different "small" function handle
% to be applied to the averages.
%
% Note 2:
% Don't need to redefine new variables each time, could just give them
% directly to the function as arguments, I'm just doing this for clarity.
fcn = @(LFP_mean)tbl.est.tLFPavgMin(LFP_mean,C.Properties.UserData.t.LFP);
inputVars = 'LFP_mean';
outputVar = 'LFP_tMin';
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar); % ~4 sec

%% Display figure of minima distribution, by area, for Solenoid strikes only
fig = utils.formatDefaultFigure(figure,'Name','Distributions of LFP Time-to-Minima (ms)'); 
ax = utils.formatDefaultAxes(subplot(1,2,1),'Parent',fig,'XLim',[30 250]); % Helper to apply MM-preferred axes properties
histogram(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="S1"),30:10:250,'FaceColor',cfg.gfx('Color_S1'),'EdgeColor','none','Normalization','pdf');
set(findobj(ax.Children','Type','histogram'),'DisplayName','Observed Distribution');
ksdensity(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="S1"),'Function','pdf','kernel','Epanechnikov'); % Epanechnikov: kernel is optimal with respect to minimizing mean-square error
set(findobj(ax.Children,'Type','line'),'LineWidth',2.5,'Color','k','LineStyle',':','DisplayName','Smoothed Distribution Estimate');
utils.formatDefaultLabel([title(ax,'S1');xlabel(ax,'Time (ms)');ylabel(ax,'Count')],'Color',cfg.gfx('Color_S1'));
utils.addLegendToAxes(ax); % Add formatted axes
ax = utils.formatDefaultAxes(subplot(1,2,2),'Parent',fig,'XLim',[30 250],'YLim',ax.YLim); % Give it the same y-limits as the S1 axes
histogram(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="RFA"),30:10:250,'FaceColor',cfg.gfx('Color_RFA'),'EdgeColor','none','Normalization','pdf');
set(findobj(ax.Children','Type','histogram'),'DisplayName','Observed Distribution');
ksdensity(ax,C.LFP_tMin(C.Type=="Solenoid" & C.Area=="RFA"),'Function','pdf','kernel','Epanechnikov');  % Epanechnikov: kernel is optimal with respect to minimizing mean-square error
set(findobj(ax.Children,'Type','line'),'LineWidth',2.5,'Color','k','LineStyle',':','DisplayName','Smoothed Distribution Estimate');
utils.addLegendToAxes(ax); % Add formatted axes
utils.formatDefaultLabel([title(ax,'RFA');xlabel(ax,'Time (ms)');ylabel(ax,'Count')],'Color',cfg.gfx('Color_RFA'));

% Note 3: 
% See code in Figures.CompareTimeToLFPMinima, which is the same as
% above. This is an example of (my) standard workflow: iterate and develop
% in "test" scripts that organize everything (you will lose track of it if
% done in the Command Window otherwise); then, as you make figures or other
% "compartmentalized" elements, move them into functions so that you can
% recall them easier in the future and so that they are clearly categorized
% with what associated (manuscript-related) endpoint they go with. The
% Contents.m in +Figures should give a summary of what "endpoint" figures
% there are as they relate to the repository experiment.

% Same result as previous steps:
% C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar); % ~4 sec
% fig = Figures.CompareTimeToLFPMinima(C);

%% Illustrating intentional errors in prior code
% So now we have a way to plot and compare time to LFP peak minima. 
% 
% Note 4:
% I could have made Figures.CompareTimeToLFPMinima(C):
%
%  fig_min = Figures.CompareTimeToLFPpeak(C,'LFP_tMin');
%  fig_max = Figures.CompareTimeToLFPpeak(C,'LFP_tMax');
%
% That way I could have generalized the function so that it handled both
% "minima" and "maxima" without having to write the same code twice. It
% would only require that I code a second input argument, specifying the
% table variable to be used in the output graphic where histogram or
% ksdensity is called in the "CompareTimeToLFPMinima" version.
%
% Note 5:
% Something else is wrong: the Solenoid strike does not always occur at
% experimental trial time "zero" -- sometimes it is lagged relative to
% "trial" onset by some amount (so that ICMS could be delivered prior to
% solenoid strike, for example). The code to compute time-to-peak only uses
% the times with reference to the trial times, not with respect to the
% stimulus, since on any given trial the stimulus might be one or multiple
% different sources. We should redo it, specifying a reference time. We can
% easily include this as an additional <'Name',value> parameter argument in
% (new) `tLFPpeak`, which as previously pointed out, can be used to
% flexibly compute min or max depending on an additional input argument.

% Recompute values of minima
tLFP = C.Properties.UserData.t.LFP;
fcn = @(LFP_mean,Solenoid_Onset)tbl.est.tLFPpeak(LFP_mean,Solenoid_Onset,tLFP,'min');
inputVars = {'LFP_mean','Solenoid_Onset'}; % Now we have to specify 2 args: anything that must be "matched" on a per-row basis when splitting up the table has to be done this way
outputVar = 'LFP_tMin';  
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar); % ~1 sec

% We should make sure it's understood what LFP_tMin refers to
C.Properties.VariableUnits{'LFP_tMin'} = 'ms'; % milliseconds
desc = ['Minimum average LFP time with respect to Solenoid Onset' newline ...
    '(only valid for Solenoid-Only trials!)'];
C.Properties.VariableDescriptions{'LFP_tMin'} = desc;
   

% Setting VariableDescriptions when we open the Table in the Workspace
% variables list to inspect its properties, when we click the arrow next to
% the variable name in the corresponding column for LFP_tMin, we will now
% see this note included with the table.

% Fortunately, since we specified the other graphic function, we can
% correct the mistake easily, using the fixed table:
fig = Figures.CompareTimeToLFPMinima(C);
pause(1.5);
delete(fig); % Using figure handle we can programmatically close/save figs

% Looks like that doesn't even change the figure at all; we could have
% avoided this by simply looking at distribution of Solenoid Onset times
% for Solenoid-Only trials:
[fig,ax] = utils.getFigAx([],...
   sprintf('Solenoid Onset Distribution (%s)',...
   C.Properties.VariableUnits{'Solenoid_Onset'}));
histogram(ax,C.Solenoid_Onset(C.Type=="Solenoid"));
pause(2.5);
delete(fig);

% Whoops, solenoid onset times are in seconds, which is the problem here.
% We could correct it in the table, or alternatively we can handle it this
% way:
fcn = @(LFP_mean,Solenoid_Onset)tbl.est.tLFPpeak(LFP_mean,Solenoid_Onset.*1e3,tLFP,'min');
% Now solenoid onset will be multiplied by 1000 prior to estimation of
% minima times, which should resolve the issue.
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc); % ~1 sec
fig = Figures.CompareTimeToLFPMinima(C); % And create corrected figure
figName = fullfile('figures','LFP Minima Onset Comparison');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

%% We can make the graphics function more generalized
% Now that we have tuned graphics generation for a single response
% parameter, and we have a way to generate response parameters for a number
% of outputs, let's make them more programmatic. 

tLFP = C.Properties.UserData.t.LFP;
fcn = @(LFP_mean,Solenoid_Onset)tbl.est.tLFPpeak(LFP_mean,Solenoid_Onset*1e3,tLFP,'max');
inputVars = {'LFP_mean','Solenoid_Onset'}; % Now we have to specify 2 args: anything that must be "matched" on a per-row basis when splitting up the table has to be done this way
outputVar = 'LFP_tMax';  
desc = ['Average time of LFP to reach maximum with respect to Solenoid Onset' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc); % ~1 sec
% Now make figure using new method: need to get desired groupings. We can
% simply make the table to match the groupings we used for the Minima plots
groupings = table(["S1";"RFA"],[string(cfg.TrialType(1));string(cfg.TrialType(1))],...
   'VariableNames',{'Area','Type'});
fig = Figures.CompareGroupedResponses(C,groupings,'LFP_tMax',...
   'FigureName','Distributions of time to LFP trial-averaged maxima',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[0 250],...
   'YLim',[0 0.050],...
   'XLim',[0 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.001,...
   'Bins',0:10:250);
figName = fullfile('figures','LFP Maxima Onset Comparison');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

% Do the other one the same way to make sure they're consistent
fig = Figures.CompareGroupedResponses(C,groupings,'LFP_tMin',...
   'FigureName','Distributions of time to LFP trial-averaged minima',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[0 250],...
   'YLim',[0 0.050],...
   'XLim',[0 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.004,...
   'Bins',0:10:250);
figName = fullfile('figures','LFP Minima Onset Comparison');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

%% Follow up on this since it's odd
%  To me, it's weird that there is such a big difference in the evoked LFP
%  responses when we are viewing them simply in terms of time-to-max and
%  time-to-min: the responses that I looked at had a pretty
%  "characteristic" squiggle as shown in the OneNote, which jives with the
%  observed distribution for --minima-- but not for maxima.

tLFP = C.Properties.UserData.t.LFP;
fcn = @(LFP_mean,Solenoid_Offset)tbl.est.tLFPpeak(LFP_mean,Solenoid_Offset*1e3,tLFP,'max',...
   'ZeroLFPBeforeThisTimeMS',-50); % Bump this back since dwell of solenoid was long-ish (on order of 50-ms)
inputVars = {'LFP_mean','Solenoid_Offset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_tMax_offset';  
desc = ['Average time of LFP to reach maximum with respect to Solenoid Retraction' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc); % ~1 sec

% These groupings should be the same but just putting them here for
% consistency from before.
groupings = table(["S1";"RFA"],[string(cfg.TrialType(1));string(cfg.TrialType(1))],...
   'VariableNames',{'Area','Type'});
fig = Figures.CompareGroupedResponses(C,groupings,'LFP_tMax_offset',...
   'FigureName','Distributions of time to LFP trial-averaged maxima using Solenoid Retraction',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 250],...
   'YLim',[0 0.050],...
   'XLim',[-50 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.001,...
   'Bins',-50:10:250);
figName = fullfile('figures','LFP Maxima Onset Relative to Solenoid Retraction');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

% And for minima
fcn = @(LFP_mean,Solenoid_Offset)tbl.est.tLFPpeak(LFP_mean,Solenoid_Offset*1e3,tLFP,'min',...
   'ZeroLFPBeforeThisTimeMS',-50);
inputVars = {'LFP_mean','Solenoid_Offset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_tMin_offset';  
desc = ['Average time of LFP to reach minimum with respect to Solenoid Retraction' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc); % ~1 sec

fig = Figures.CompareGroupedResponses(C,groupings,'LFP_tMin_offset',...
   'FigureName','Distributions of time to LFP trial-averaged minima using Solenoid Retraction',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 250],...
   'YLim',[0 0.050],...
   'XLim',[-50 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.003,...
   'KSMinProximity',30,...
   'Bins',-50:10:250);
figName = fullfile('figures','LFP Minima Onset Relative to Solenoid Retraction');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

%% What about for medians, does this hold up?
tLFP = C.Properties.UserData.t.LFP;
fcn = @(X,tStim)tbl.est.tLFPpeak(X,tStim*1e3,tLFP,'min','ZeroLFPBeforeThisTimeMS',-50); % Bump this back since dwell of solenoid was long-ish (on order of 50-ms)
inputVars = {'LFP_median','Solenoid_Onset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_Median_tMin_Onset';  
desc = ['Average time of LFP median to reach minimum with respect to Solenoid Strike' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc);
fcn = @(X,tStim)tbl.est.tLFPpeak(X,tStim*1e3,tLFP,'max','ZeroLFPBeforeThisTimeMS',-50); % Bump this back since dwell of solenoid was long-ish (on order of 50-ms)
inputVars = {'LFP_median','Solenoid_Onset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_Median_tMax_Onset';  
desc = ['Average time of LFP median to reach maximum with respect to Solenoid Strike' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc);
fcn = @(X,tStim)tbl.est.tLFPpeak(X,tStim*1e3,tLFP,'min','ZeroLFPBeforeThisTimeMS',-50); % Bump this back since dwell of solenoid was long-ish (on order of 50-ms)
inputVars = {'LFP_median','Solenoid_Offset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_Median_tMin_Offset';  
desc = ['Average time of LFP median to reach minimum with respect to Solenoid Retract' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc);
fcn = @(X,tStim)tbl.est.tLFPpeak(X,tStim*1e3,tLFP,'max','ZeroLFPBeforeThisTimeMS',-50); % Bump this back since dwell of solenoid was long-ish (on order of 50-ms)
inputVars = {'LFP_median','Solenoid_Offset'}; % CHANGE stimulus-alignment to OFFSET (release of solenoid from the paw)
outputVar = 'LFP_Median_tMax_Offset';  
desc = ['Average time of LFP median to reach maximum with respect to Solenoid Retract' newline ...
    '(only valid for Solenoid-Only trials!)'];
C = tbl.stats.estimateChannelResponse(C,fcn,inputVars,outputVar,...
   'OutputVariableUnits','ms','OutputVariableDescription',desc);


%% Make figures
groupings = table(...
   ["S1";"RFA"],... % Area
   [string(cfg.TrialType(1));string(cfg.TrialType(1))],... % Type
   'VariableNames',{'Area','Type'});
fig = Figures.CompareGroupedResponses(C,groupings,'LFP_Median_tMin_Onset',...
   'FigureName','Distributions of time to median LFP minima using Solenoid Strike',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 250],...
   'YLim',[0 0.050],...
   'XLim',[-50 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.0025,...
   'KSMinProximity',100,...
   'Bins',-50:10:250);
figName = fullfile('figures','Median LFP Minima Onset Relative to Solenoid Strike');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

fig = Figures.CompareGroupedResponses(C,groupings,'LFP_Median_tMin_Offset',...
   'FigureName','Distributions of time to median LFP minima using Solenoid Retraction',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 250],...
   'YLim',[0 0.050],...
   'XLim',[-50 250],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.0025,...
   'KSMinProximity',30,...
   'Bins',-50:10:250);
figName = fullfile('figures','Median LFP Minima Onset Relative to Solenoid Retraction');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

%% Plot times to median maxima
fig = Figures.CompareGroupedResponses(C,groupings,'LFP_Median_tMax_Onset',...
   'FigureName','Distributions of time to median LFP maxima using Solenoid Strike',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 450],...
   'YLim',[0 0.050],...
   'XLim',[-50 450],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.001,...
   'KSMinProximity',30,...
   'Bins',-50:10:450);
figName = fullfile('figures','Median LFP Maxima Onset Relative to Solenoid Strike');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);

fig = Figures.CompareGroupedResponses(C,groupings,'LFP_Median_tMax_Offset',...
   'FigureName','Distributions of time to median LFP maxima using Solenoid Retraction',...
   'Color',[cfg.gfx('Color_S1'); cfg.gfx('Color_RFA')],...
   'ExclusionThreshold',[-50 450],...
   'YLim',[0 0.050],...
   'XLim',[-50 450],...
   'PeakMarker_Args',...
      {'CoordinateMarkerArgs',[3,4,1,2],...
       'XCoordinate','',...
       'YCoordinate','p=',...
       'CoordinateSpec',['%s%5.3f' newline '%s%4.1f ms']},...
   'KSMinProminence',0.001,...
   'KSMinProximity',30,...
   'Bins',-50:10:450);
figName = fullfile('figures','Median LFP Maxima Onset Relative to Solenoid Retraction');
utils.expAI(fig,[figName '.eps']);
savefig(fig,[figName '.fig']);
saveas(fig,[figName '.png']);
delete(fig);